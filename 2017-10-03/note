时间:2017年10月3号
创建者:Vine
标题:PHP之MVC学习笔记
一.什么是MVC
传统的面向过程化编程在面对中型以上的应用时,就会显得力不从心,甚至会陷入我们前期自己设定的陷阱.使用MVC编程可以为我们梳理程序架构提供一个清晰的思路.
MVC 只是一种思想（或说是架构）而不是产品,MVC是种思想，页面表现和功能实现尽量分开，便于维护。
当在web应用里实施MVC时，在单一的类中不会出现model,view以及controller,MVC把各组对象紧密地连接起来，每组对象实现一种特定的任务。controller可以由几类组成，用来分析http请求，以确定应用程序所要进行的处理动作。model一般是由很多类组成。web应用里的view通常是一种模板体系，可以由一些对象组成。
1.过程化编程
显示文章列表:先由数据库中取出列表数据,形成数组,然后再循环数据,用ul>li输出,再传到浏览器.然后代码混叠在一起,数据层代码,html代码,php代码混合在一起.
2.面向对象编程与MVC编程
面向对象:先思考,再写代码.
MVC:
(1)M:MODEL 模型
功能:获取数据并处理返回的数据,负责与数据库打交道.取出需要的数据.模型用于封装与应用程序的业务逻辑相关的数据以及数据的处理方法."模型"有对数据直接访问的权利,例如对数据库的访问."模型"不依赖"视图"和"控制器".也就是说,模型不会关心它是如何显示或是如何被操作.但是模型中数据的变化一般会通过一种刷新机制被公布.为了实现这种机制,那些用于监视此模型的视图必须事先在此模型上注册,从而,视图可以了解在数据模型上发生的改变.业务逻辑层.一般来说,这一层完成的工作时把原始的数据处理成按照我们设计的数据结构存储的有意义的数据序列,并将这些数据交给视图去处理.通常情况下,模板会利用一个数据抽象类来进行与数据操作有关的处理.Model通常包含那些用来同数据库打交道的函数
负责人员:程序员-->算法 数据库专家-->数据管理与数据库利用
(2)V:VIEW 视图
功能:将取得的数据进行组织、美化，并最终向用户终端输出。视图层能够实现数据有目的的显示.在视图中一般没有程序上的逻辑.为了实现视图上的刷新功能,视图需要访问它监视的数据模型(Model),因此应该事先在被它监视的数据那里注册.将数据以html方式呈现给用户.视图模板引擎(例如Smarty等等).其实就是各种各样的输出,比如html模板和javascript文件.
负责人员:网页开发人员,界面设计人员
(3)C:controller 控制器
功能:调用模型，并调用视图，将模型产生的数据传递给视图，并让相关视图去显示。负责转发请求,对请求进行处理.控制器起到不同层面间的组织作用,用于控制应用程序的流程.它处理事件并作出相应."事件"包括用户的行为和数据模型上的改变.控制器是所有WEB应用的第一站,他接受到的参数,比如$_GET变量,然后做出相应的反应
负责人员:业务逻辑的人员

3.MVC架构

                             http request
                                   ↓
       -----------------------controller
      ↓                            ↓
      model                       view
      ↑----------------------------↓
                             http response
在理想的MVC环境中，通讯是直接的.
直接通过View中的表单调用Model中的方法去修改数据是不合适的，数据的更新修改方法只能借助Controller来调用。View只能以数据的只读方式调用Model中的方法，不能对数据进行修改。一般情况下有两种View设计模式:Template View和Transform View。
二.如何编写一个MVC
(一)编写目录结构
|--www
    |--application   //存放web应用程序目录
        |--config   //存放程序配置或数据库配置
        |--controllers //应用的控制器类
        |--model //应用的模型类
        |--view //应用的视图文件
    |--framework    //存放框架文件目录,一般框架的文件夹名字会用框架的名字命名.
        |--core  //框架核心文件目录
        |--database //数据库目录(比如数据库启动类)
        |--helpers //辅助函数目录
        |--libraries //类库目录
    |--public       //存放所有的公共的静态资源,比如HTML文件,CSS文件和JS文件
        |--css //存放css文件
            |--imgs //存放css中用到的文件图片
        |--js //存放js文件
        |--uploads //存放上传的文件
        |--images //存放图片文件
        |--htaccess //定位到public下的index.php文件
    |--db //用于存放数据库备份内容
    |--script //存放命令行工具
    |--tmp //存放临时数据
|--htaccess 定位到public文件目录下
|--index.php  唯一入口文件

.htaccess
<IfModule mod_rewrite.c>
RewriteEngine on
RewriteRule    ^$    public/    [L]
RewriteRule    (.*) public/$1    [L]

public--htaccess
<IfModule mod_rewrite.c>
RewriteEngine On
#如果文件存在就直接访问目录不进行RewriteRule
RewriteCond %{REQUEST_FILENAME} !-f
#如果目录存在就直接访问目录不进行RewriteRule
RewriteCond %{REQUEST_FILENAME} !-d
#将所有其他URL重写到 index.php/URL
RewriteRule ^(.*)$ index.php?url=$1 [PT,L]
</IfModule>
</IfModule>


index.php的*主要的作用就是作为HTTP请求的唯一入口文件，这样无论你的URL请求什么资源，它都必须通过这个Index.php来请求。你可能要问为什么，它是如何做到的？PHP中的前端控制器用到了Apache服务器的分布式配置.htaccess实现的。

(二)编写代码 
三.MVC的优势
1.结构清晰,代码分离
界定你的代码是否分离的方法是:尝试代替View,尝试输出不同的内容,看是否能够继续输出.
2.分工合作,加快速度
3.后期适合维护
